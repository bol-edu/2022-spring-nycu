// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hls_real2xfft_Loop_sliding_win_output_proc2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        delayed_V_dout,
        delayed_V_empty_n,
        delayed_V_read,
        delayed_V_1_dout,
        delayed_V_1_empty_n,
        delayed_V_1_read,
        nodelay_V_dout,
        nodelay_V_empty_n,
        nodelay_V_read,
        nodelay_V_1_dout,
        nodelay_V_1_empty_n,
        nodelay_V_1_read,
        data2window_V_2_address0,
        data2window_V_2_ce0,
        data2window_V_2_we0,
        data2window_V_2_d0,
        data2window_V_address0,
        data2window_V_ce0,
        data2window_V_we0,
        data2window_V_d0
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_pp0_stage0 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] delayed_V_dout;
input   delayed_V_empty_n;
output   delayed_V_read;
input  [15:0] delayed_V_1_dout;
input   delayed_V_1_empty_n;
output   delayed_V_1_read;
input  [15:0] nodelay_V_dout;
input   nodelay_V_empty_n;
output   nodelay_V_read;
input  [15:0] nodelay_V_1_dout;
input   nodelay_V_1_empty_n;
output   nodelay_V_1_read;
output  [8:0] data2window_V_2_address0;
output   data2window_V_2_ce0;
output   data2window_V_2_we0;
output  [15:0] data2window_V_2_d0;
output  [8:0] data2window_V_address0;
output   data2window_V_ce0;
output   data2window_V_we0;
output  [15:0] data2window_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg delayed_V_read;
reg delayed_V_1_read;
reg nodelay_V_read;
reg nodelay_V_1_read;
reg data2window_V_2_ce0;
reg data2window_V_2_we0;
reg data2window_V_ce0;
reg data2window_V_we0;
reg[15:0] data2window_V_d0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] tmp_1_fu_158_p3;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg   [0:0] tmp_reg_173;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg    nodelay_V_blk_n;
wire    ap_block_pp0_stage0;
reg    nodelay_V_1_blk_n;
reg    delayed_V_blk_n;
reg    delayed_V_1_blk_n;
reg   [9:0] i9_reg_102;
reg   [0:0] tmp_reg_173_pp0_iter1_reg;
reg   [0:0] tmp_reg_173_pp0_iter2_reg;
reg   [8:0] lshr_ln_reg_177;
reg   [8:0] lshr_ln_reg_177_pp0_iter1_reg;
reg   [8:0] lshr_ln_reg_177_pp0_iter2_reg;
wire   [9:0] trunc_ln83_fu_154_p1;
reg   [9:0] trunc_ln83_reg_182;
reg   [0:0] tmp_1_reg_187;
reg   [0:0] tmp_1_reg_187_pp0_iter1_reg;
reg   [0:0] tmp_1_reg_187_pp0_iter2_reg;
reg   [15:0] delayed_V_read_reg_191;
reg   [15:0] delayed_V_read_reg_191_pp0_iter2_reg;
reg   [15:0] delayed_V_1_read_reg_196;
reg   [15:0] nodelay_V_read_reg_201;
reg   [15:0] nodelay_V_read_reg_201_pp0_iter2_reg;
reg   [15:0] nodelay_V_1_read_reg_206;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg   [9:0] ap_phi_mux_i9_phi_fu_106_p6;
wire   [15:0] ap_phi_reg_pp0_iter0_dout_val_reg_116;
reg   [15:0] ap_phi_reg_pp0_iter1_dout_val_reg_116;
reg   [15:0] ap_phi_reg_pp0_iter2_dout_val_reg_116;
reg   [15:0] ap_phi_reg_pp0_iter3_dout_val_reg_116;
wire   [63:0] zext_ln92_fu_166_p1;
wire   [10:0] i9_cast_fu_126_p1;
wire   [10:0] i_fu_148_p2;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_idle_pp0_0to2;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_100;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (tmp_1_reg_187_pp0_iter2_reg == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if ((tmp_reg_173_pp0_iter1_reg == 1'd1)) begin
            ap_phi_reg_pp0_iter3_dout_val_reg_116 <= nodelay_V_1_read_reg_206;
        end else if ((tmp_reg_173_pp0_iter1_reg == 1'd0)) begin
            ap_phi_reg_pp0_iter3_dout_val_reg_116 <= delayed_V_1_read_reg_196;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter3_dout_val_reg_116 <= ap_phi_reg_pp0_iter2_dout_val_reg_116;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_1_reg_187 == 1'd0))) begin
        i9_reg_102 <= trunc_ln83_reg_182;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_1_reg_187 == 1'd1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        i9_reg_102 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_dout_val_reg_116 <= ap_phi_reg_pp0_iter0_dout_val_reg_116;
        trunc_ln83_reg_182 <= trunc_ln83_fu_154_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter2_dout_val_reg_116 <= ap_phi_reg_pp0_iter1_dout_val_reg_116;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_173 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delayed_V_1_read_reg_196 <= delayed_V_1_dout;
        delayed_V_read_reg_191 <= delayed_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        delayed_V_read_reg_191_pp0_iter2_reg <= delayed_V_read_reg_191;
        lshr_ln_reg_177_pp0_iter2_reg <= lshr_ln_reg_177_pp0_iter1_reg;
        nodelay_V_read_reg_201_pp0_iter2_reg <= nodelay_V_read_reg_201;
        tmp_1_reg_187_pp0_iter2_reg <= tmp_1_reg_187_pp0_iter1_reg;
        tmp_reg_173_pp0_iter2_reg <= tmp_reg_173_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        lshr_ln_reg_177 <= {{ap_phi_mux_i9_phi_fu_106_p6[9:1]}};
        lshr_ln_reg_177_pp0_iter1_reg <= lshr_ln_reg_177;
        tmp_1_reg_187 <= i_fu_148_p2[32'd10];
        tmp_1_reg_187_pp0_iter1_reg <= tmp_1_reg_187;
        tmp_reg_173 <= ap_phi_mux_i9_phi_fu_106_p6[32'd9];
        tmp_reg_173_pp0_iter1_reg <= tmp_reg_173;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_173 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        nodelay_V_1_read_reg_206 <= nodelay_V_1_dout;
        nodelay_V_read_reg_201 <= nodelay_V_dout;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (tmp_1_reg_187_pp0_iter2_reg == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0_0to2 = 1'b1;
    end else begin
        ap_idle_pp0_0to2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_100)) begin
        if ((tmp_1_reg_187 == 1'd1)) begin
            ap_phi_mux_i9_phi_fu_106_p6 = 10'd0;
        end else if ((tmp_1_reg_187 == 1'd0)) begin
            ap_phi_mux_i9_phi_fu_106_p6 = trunc_ln83_reg_182;
        end else begin
            ap_phi_mux_i9_phi_fu_106_p6 = i9_reg_102;
        end
    end else begin
        ap_phi_mux_i9_phi_fu_106_p6 = i9_reg_102;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (tmp_1_fu_158_p3 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to2 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        data2window_V_2_ce0 = 1'b1;
    end else begin
        data2window_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        data2window_V_2_we0 = 1'b1;
    end else begin
        data2window_V_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (tmp_reg_173_pp0_iter2_reg == 1'd1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (tmp_reg_173_pp0_iter2_reg == 1'd0)))) begin
        data2window_V_ce0 = 1'b1;
    end else begin
        data2window_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        if ((tmp_reg_173_pp0_iter2_reg == 1'd1)) begin
            data2window_V_d0 = nodelay_V_read_reg_201_pp0_iter2_reg;
        end else if ((tmp_reg_173_pp0_iter2_reg == 1'd0)) begin
            data2window_V_d0 = delayed_V_read_reg_191_pp0_iter2_reg;
        end else begin
            data2window_V_d0 = 'bx;
        end
    end else begin
        data2window_V_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (tmp_reg_173_pp0_iter2_reg == 1'd1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (tmp_reg_173_pp0_iter2_reg == 1'd0)))) begin
        data2window_V_we0 = 1'b1;
    end else begin
        data2window_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_reg_173 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delayed_V_1_blk_n = delayed_V_1_empty_n;
    end else begin
        delayed_V_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_reg_173 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delayed_V_1_read = 1'b1;
    end else begin
        delayed_V_1_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_reg_173 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delayed_V_blk_n = delayed_V_empty_n;
    end else begin
        delayed_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_reg_173 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        delayed_V_read = 1'b1;
    end else begin
        delayed_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_reg_173 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        nodelay_V_1_blk_n = nodelay_V_1_empty_n;
    end else begin
        nodelay_V_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_reg_173 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        nodelay_V_1_read = 1'b1;
    end else begin
        nodelay_V_1_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_reg_173 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        nodelay_V_blk_n = nodelay_V_empty_n;
    end else begin
        nodelay_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_reg_173 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        nodelay_V_read = 1'b1;
    end else begin
        nodelay_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((ap_reset_idle_pp0 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((nodelay_V_1_empty_n == 1'b0) & (tmp_reg_173 == 1'd1)) | ((nodelay_V_empty_n == 1'b0) & (tmp_reg_173 == 1'd1)) | ((delayed_V_1_empty_n == 1'b0) & (tmp_reg_173 == 1'd0)) | ((tmp_reg_173 == 1'd0) & (delayed_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((nodelay_V_1_empty_n == 1'b0) & (tmp_reg_173 == 1'd1)) | ((nodelay_V_empty_n == 1'b0) & (tmp_reg_173 == 1'd1)) | ((delayed_V_1_empty_n == 1'b0) & (tmp_reg_173 == 1'd0)) | ((tmp_reg_173 == 1'd0) & (delayed_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((nodelay_V_1_empty_n == 1'b0) & (tmp_reg_173 == 1'd1)) | ((nodelay_V_empty_n == 1'b0) & (tmp_reg_173 == 1'd1)) | ((delayed_V_1_empty_n == 1'b0) & (tmp_reg_173 == 1'd0)) | ((tmp_reg_173 == 1'd0) & (delayed_V_empty_n == 1'b0)));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_100 = ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_phi_reg_pp0_iter0_dout_val_reg_116 = 'bx;

assign data2window_V_2_address0 = zext_ln92_fu_166_p1;

assign data2window_V_2_d0 = ap_phi_reg_pp0_iter3_dout_val_reg_116;

assign data2window_V_address0 = zext_ln92_fu_166_p1;

assign i9_cast_fu_126_p1 = ap_phi_mux_i9_phi_fu_106_p6;

assign i_fu_148_p2 = (i9_cast_fu_126_p1 + 11'd2);

assign tmp_1_fu_158_p3 = i_fu_148_p2[32'd10];

assign trunc_ln83_fu_154_p1 = i_fu_148_p2[9:0];

assign zext_ln92_fu_166_p1 = lshr_ln_reg_177_pp0_iter2_reg;

endmodule //hls_real2xfft_Loop_sliding_win_output_proc2
