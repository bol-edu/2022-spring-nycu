-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hls_xfft2real_Loop_realfft_be_stream_output_proc4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    real_spectrum_lo_i_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    real_spectrum_lo_i_empty_n : IN STD_LOGIC;
    real_spectrum_lo_i_read : OUT STD_LOGIC;
    real_spectrum_hi_i_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    real_spectrum_hi_i_empty_n : IN STD_LOGIC;
    real_spectrum_hi_i_read : OUT STD_LOGIC;
    dout_TREADY : IN STD_LOGIC;
    dout_TDATA : OUT STD_LOGIC_VECTOR (47 downto 0);
    dout_TVALID : OUT STD_LOGIC );
end;


architecture behav of hls_xfft2real_Loop_realfft_be_stream_output_proc4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal dout_val_last_V_fu_104_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal tmp_1_reg_124 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal regslice_both_dout_U_apdone_blk : STD_LOGIC;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal dout_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal real_spectrum_lo_i_blk_n : STD_LOGIC;
    signal real_spectrum_hi_i_blk_n : STD_LOGIC;
    signal i1_reg_67 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_1_reg_124_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_98_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_reg_128 : STD_LOGIC_VECTOR (8 downto 0);
    signal dout_val_last_V_reg_133 : STD_LOGIC_VECTOR (0 downto 0);
    signal dout_val_last_V_reg_133_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal dout_val_last_V_reg_133_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal real_spectrum_lo_i_read_reg_138 : STD_LOGIC_VECTOR (31 downto 0);
    signal real_spectrum_hi_i_read_reg_143 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_phi_mux_i1_phi_fu_71_p6 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_mux_dout_val_i_0_0_0_in_phi_fu_84_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter2_dout_val_i_0_0_0_in_reg_81 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_fu_110_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_idle_pp0_0to2 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal dout_TDATA_int_regslice : STD_LOGIC_VECTOR (47 downto 0);
    signal dout_TVALID_int_regslice : STD_LOGIC;
    signal dout_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_dout_U_vld_out : STD_LOGIC;
    signal ap_condition_91 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component hls_xfft2real_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_both_dout_U : component hls_xfft2real_regslice_both
    generic map (
        DataWidth => 48)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => dout_TDATA_int_regslice,
        vld_in => dout_TVALID_int_regslice,
        ack_in => dout_TREADY_int_regslice,
        data_out => dout_TDATA,
        vld_out => regslice_both_dout_U_vld_out,
        ack_out => dout_TREADY,
        apdone_blk => regslice_both_dout_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (dout_val_last_V_reg_133_pp0_iter2_reg = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i1_reg_67_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (dout_val_last_V_reg_133 = ap_const_lv1_0))) then 
                i1_reg_67 <= i_reg_128;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (dout_val_last_V_reg_133 = ap_const_lv1_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                i1_reg_67 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                dout_val_last_V_reg_133 <= dout_val_last_V_fu_104_p2;
                dout_val_last_V_reg_133_pp0_iter1_reg <= dout_val_last_V_reg_133;
                tmp_1_reg_124 <= ap_phi_mux_i1_phi_fu_71_p6(8 downto 8);
                tmp_1_reg_124_pp0_iter1_reg <= tmp_1_reg_124;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                dout_val_last_V_reg_133_pp0_iter2_reg <= dout_val_last_V_reg_133_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_reg_128 <= i_fu_98_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_1_reg_124 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                real_spectrum_hi_i_read_reg_143 <= real_spectrum_hi_i_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_1_reg_124 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                real_spectrum_lo_i_read_reg_138 <= real_spectrum_lo_i_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_reset_idle_pp0 = ap_const_logic_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_reset_idle_pp0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_done_reg, real_spectrum_lo_i_empty_n, tmp_1_reg_124, real_spectrum_hi_i_empty_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, regslice_both_dout_U_apdone_blk, ap_enable_reg_pp0_iter3, dout_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and ((regslice_both_dout_U_apdone_blk = ap_const_logic_1) or (dout_TREADY_int_regslice = ap_const_logic_0))) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (dout_TREADY_int_regslice = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((real_spectrum_hi_i_empty_n = ap_const_logic_0) and (tmp_1_reg_124 = ap_const_lv1_1)) or ((tmp_1_reg_124 = ap_const_lv1_0) and (real_spectrum_lo_i_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_done_reg, real_spectrum_lo_i_empty_n, tmp_1_reg_124, real_spectrum_hi_i_empty_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, regslice_both_dout_U_apdone_blk, ap_enable_reg_pp0_iter3, dout_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and ((regslice_both_dout_U_apdone_blk = ap_const_logic_1) or (dout_TREADY_int_regslice = ap_const_logic_0))) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (dout_TREADY_int_regslice = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((real_spectrum_hi_i_empty_n = ap_const_logic_0) and (tmp_1_reg_124 = ap_const_lv1_1)) or ((tmp_1_reg_124 = ap_const_lv1_0) and (real_spectrum_lo_i_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_done_reg, real_spectrum_lo_i_empty_n, tmp_1_reg_124, real_spectrum_hi_i_empty_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, regslice_both_dout_U_apdone_blk, ap_enable_reg_pp0_iter3, dout_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and ((regslice_both_dout_U_apdone_blk = ap_const_logic_1) or (dout_TREADY_int_regslice = ap_const_logic_0))) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (dout_TREADY_int_regslice = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((real_spectrum_hi_i_empty_n = ap_const_logic_0) and (tmp_1_reg_124 = ap_const_lv1_1)) or ((tmp_1_reg_124 = ap_const_lv1_0) and (real_spectrum_lo_i_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(real_spectrum_lo_i_empty_n, tmp_1_reg_124, real_spectrum_hi_i_empty_n)
    begin
                ap_block_state3_pp0_stage0_iter1 <= (((real_spectrum_hi_i_empty_n = ap_const_logic_0) and (tmp_1_reg_124 = ap_const_lv1_1)) or ((tmp_1_reg_124 = ap_const_lv1_0) and (real_spectrum_lo_i_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state4_pp0_stage0_iter2_assign_proc : process(dout_TREADY_int_regslice)
    begin
                ap_block_state4_pp0_stage0_iter2 <= (dout_TREADY_int_regslice = ap_const_logic_0);
    end process;


    ap_block_state5_pp0_stage0_iter3_assign_proc : process(regslice_both_dout_U_apdone_blk, dout_TREADY_int_regslice)
    begin
                ap_block_state5_pp0_stage0_iter3 <= ((regslice_both_dout_U_apdone_blk = ap_const_logic_1) or (dout_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_condition_91_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
                ap_condition_91 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, dout_val_last_V_reg_133_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (dout_val_last_V_reg_133_pp0_iter2_reg = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_dout_val_i_0_0_0_in_phi_fu_84_p4_assign_proc : process(tmp_1_reg_124_pp0_iter1_reg, real_spectrum_lo_i_read_reg_138, real_spectrum_hi_i_read_reg_143, ap_phi_reg_pp0_iter2_dout_val_i_0_0_0_in_reg_81)
    begin
        if ((tmp_1_reg_124_pp0_iter1_reg = ap_const_lv1_1)) then 
            ap_phi_mux_dout_val_i_0_0_0_in_phi_fu_84_p4 <= real_spectrum_hi_i_read_reg_143;
        elsif ((tmp_1_reg_124_pp0_iter1_reg = ap_const_lv1_0)) then 
            ap_phi_mux_dout_val_i_0_0_0_in_phi_fu_84_p4 <= real_spectrum_lo_i_read_reg_138;
        else 
            ap_phi_mux_dout_val_i_0_0_0_in_phi_fu_84_p4 <= ap_phi_reg_pp0_iter2_dout_val_i_0_0_0_in_reg_81;
        end if; 
    end process;


    ap_phi_mux_i1_phi_fu_71_p6_assign_proc : process(i1_reg_67, i_reg_128, dout_val_last_V_reg_133, ap_condition_91)
    begin
        if ((ap_const_boolean_1 = ap_condition_91)) then
            if ((dout_val_last_V_reg_133 = ap_const_lv1_1)) then 
                ap_phi_mux_i1_phi_fu_71_p6 <= ap_const_lv9_0;
            elsif ((dout_val_last_V_reg_133 = ap_const_lv1_0)) then 
                ap_phi_mux_i1_phi_fu_71_p6 <= i_reg_128;
            else 
                ap_phi_mux_i1_phi_fu_71_p6 <= i1_reg_67;
            end if;
        else 
            ap_phi_mux_i1_phi_fu_71_p6 <= i1_reg_67;
        end if; 
    end process;

    ap_phi_reg_pp0_iter2_dout_val_i_0_0_0_in_reg_81 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_ready_assign_proc : process(dout_val_last_V_fu_104_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (dout_val_last_V_fu_104_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to2)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to2 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    dout_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, dout_TREADY_int_regslice)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            dout_TDATA_blk_n <= dout_TREADY_int_regslice;
        else 
            dout_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dout_TDATA_int_regslice <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_110_p3),48));
    dout_TVALID <= regslice_both_dout_U_vld_out;

    dout_TVALID_int_regslice_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            dout_TVALID_int_regslice <= ap_const_logic_1;
        else 
            dout_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    dout_val_last_V_fu_104_p2 <= "1" when (ap_phi_mux_i1_phi_fu_71_p6 = ap_const_lv9_1FF) else "0";
    i_fu_98_p2 <= std_logic_vector(unsigned(ap_phi_mux_i1_phi_fu_71_p6) + unsigned(ap_const_lv9_1));

    real_spectrum_hi_i_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_1_reg_124, real_spectrum_hi_i_empty_n, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (tmp_1_reg_124 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            real_spectrum_hi_i_blk_n <= real_spectrum_hi_i_empty_n;
        else 
            real_spectrum_hi_i_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    real_spectrum_hi_i_read_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_1_reg_124, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (tmp_1_reg_124 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            real_spectrum_hi_i_read <= ap_const_logic_1;
        else 
            real_spectrum_hi_i_read <= ap_const_logic_0;
        end if; 
    end process;


    real_spectrum_lo_i_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, real_spectrum_lo_i_empty_n, tmp_1_reg_124, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (tmp_1_reg_124 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            real_spectrum_lo_i_blk_n <= real_spectrum_lo_i_empty_n;
        else 
            real_spectrum_lo_i_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    real_spectrum_lo_i_read_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_1_reg_124, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (tmp_1_reg_124 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            real_spectrum_lo_i_read <= ap_const_logic_1;
        else 
            real_spectrum_lo_i_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_110_p3 <= (dout_val_last_V_reg_133_pp0_iter1_reg & ap_phi_mux_dout_val_i_0_0_0_in_phi_fu_84_p4);
end behav;
