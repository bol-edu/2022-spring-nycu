-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hls_xfft2real_Loop_realfft_be_descramble_proc2_Pipeline_realfft_be_descramble is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    real_spectrum_lo_i_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    real_spectrum_lo_i_full_n : IN STD_LOGIC;
    real_spectrum_lo_i_write : OUT STD_LOGIC;
    descramble_buf_M_real_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    descramble_buf_M_real_V_ce0 : OUT STD_LOGIC;
    descramble_buf_M_real_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    descramble_buf_M_imag_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    descramble_buf_M_imag_V_ce0 : OUT STD_LOGIC;
    descramble_buf_M_imag_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    descramble_buf_M_imag_V_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    descramble_buf_M_imag_V_1_ce0 : OUT STD_LOGIC;
    descramble_buf_M_imag_V_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    descramble_buf_M_real_V_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    descramble_buf_M_real_V_1_ce0 : OUT STD_LOGIC;
    descramble_buf_M_real_V_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    twid_rom_M_real_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    twid_rom_M_real_V_ce0 : OUT STD_LOGIC;
    twid_rom_M_real_V_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    twid_rom_M_imag_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    twid_rom_M_imag_V_ce0 : OUT STD_LOGIC;
    twid_rom_M_imag_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    descramble_buf_M_imag_V_1_load : IN STD_LOGIC_VECTOR (15 downto 0);
    descramble_buf_M_real_V_1_load : IN STD_LOGIC_VECTOR (15 downto 0);
    real_spectrum_hi_buf_M_real_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    real_spectrum_hi_buf_M_real_V_ce0 : OUT STD_LOGIC;
    real_spectrum_hi_buf_M_real_V_we0 : OUT STD_LOGIC;
    real_spectrum_hi_buf_M_real_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    real_spectrum_hi_buf_M_imag_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    real_spectrum_hi_buf_M_imag_V_ce0 : OUT STD_LOGIC;
    real_spectrum_hi_buf_M_imag_V_we0 : OUT STD_LOGIC;
    real_spectrum_hi_buf_M_imag_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of hls_xfft2real_Loop_realfft_be_descramble_proc2_Pipeline_realfft_be_descramble is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln88_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal real_spectrum_lo_i_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_2_reg_814 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_2_reg_814_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal i_2_reg_814_pp0_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal i_2_reg_814_pp0_iter3_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln88_fu_221_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln88_reg_824 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln88_fu_227_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln88_reg_829 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln88_reg_829_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln712_4_fu_231_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln712_4_reg_834 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln712_fu_237_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln712_reg_839 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln712_reg_839_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln712_reg_839_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln712_reg_839_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln712_reg_839_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln712_reg_839_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln712_reg_839_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln712_reg_839_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln712_reg_839_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln712_reg_839_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln712_reg_839_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln712_reg_839_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln712_reg_839_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln712_reg_839_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln712_reg_839_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln90_fu_245_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln90_reg_851 : STD_LOGIC_VECTOR (63 downto 0);
    signal descramble_buf_M_imag_V_1_load_1_reg_866 : STD_LOGIC_VECTOR (15 downto 0);
    signal descramble_buf_M_imag_V_load_reg_876 : STD_LOGIC_VECTOR (15 downto 0);
    signal descramble_buf_M_imag_V_load_reg_876_pp0_iter5_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal descramble_buf_M_imag_V_load_reg_876_pp0_iter6_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal descramble_buf_M_imag_V_load_reg_876_pp0_iter7_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal descramble_buf_M_imag_V_load_reg_876_pp0_iter8_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal descramble_buf_M_imag_V_load_reg_876_pp0_iter9_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal descramble_buf_M_imag_V_load_reg_876_pp0_iter10_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal descramble_buf_M_imag_V_load_reg_876_pp0_iter11_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal descramble_buf_M_imag_V_load_reg_876_pp0_iter12_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln92_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln92_reg_883 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln92_reg_883_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln92_reg_883_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln92_reg_883_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln92_reg_883_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln92_reg_883_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln92_reg_883_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln92_reg_883_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln92_reg_883_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln92_reg_883_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln712_1_fu_259_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln712_1_reg_891 : STD_LOGIC_VECTOR (15 downto 0);
    signal descramble_buf_M_real_V_load_reg_906 : STD_LOGIC_VECTOR (15 downto 0);
    signal descramble_buf_M_real_V_load_reg_906_pp0_iter6_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal descramble_buf_M_real_V_load_reg_906_pp0_iter7_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal descramble_buf_M_real_V_load_reg_906_pp0_iter8_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal descramble_buf_M_real_V_load_reg_906_pp0_iter9_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal descramble_buf_M_real_V_load_reg_906_pp0_iter10_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal descramble_buf_M_real_V_load_reg_906_pp0_iter11_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal descramble_buf_M_real_V_load_reg_906_pp0_iter12_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal descramble_buf_M_real_V_1_load_1_reg_913 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_8_fu_270_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_8_reg_918 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_7_fu_276_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_7_reg_923 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_2_reg_928 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_928_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1201_5_reg_933 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1201_5_reg_933_pp0_iter6_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1201_7_reg_938 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_9_fu_316_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_9_reg_943 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_6_fu_322_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_6_reg_948 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_reg_953 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_953_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1201_2_reg_958 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1201_2_reg_958_pp0_iter7_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1201_4_reg_963 : STD_LOGIC_VECTOR (15 downto 0);
    signal g_M_real_V_fu_389_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal g_M_real_V_reg_968 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_reg_973 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_973_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1201_3_reg_978 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1201_3_reg_978_pp0_iter7_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal w_M_real_V_reg_983 : STD_LOGIC_VECTOR (14 downto 0);
    signal w_M_imag_V_reg_988 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1201_1_reg_993 : STD_LOGIC_VECTOR (15 downto 0);
    signal f_M_imag_V_fu_435_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal f_M_imag_V_reg_998 : STD_LOGIC_VECTOR (15 downto 0);
    signal f_M_imag_V_reg_998_pp0_iter8_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal f_M_imag_V_reg_998_pp0_iter9_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal f_M_imag_V_reg_998_pp0_iter10_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal f_M_imag_V_reg_998_pp0_iter11_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal f_M_imag_V_reg_998_pp0_iter12_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1171_fu_441_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln1201_s_reg_1010 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1168_fu_459_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln1168_reg_1015 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln1168_reg_1015_pp0_iter8_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln1171_2_fu_462_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln1171_2_reg_1021 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln1171_2_reg_1021_pp0_iter8_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal f_M_real_V_fu_470_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal f_M_real_V_reg_1027 : STD_LOGIC_VECTOR (15 downto 0);
    signal f_M_real_V_reg_1027_pp0_iter9_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal f_M_real_V_reg_1027_pp0_iter10_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal f_M_real_V_reg_1027_pp0_iter11_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal f_M_real_V_reg_1027_pp0_iter12_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal g_M_imag_V_fu_481_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal g_M_imag_V_reg_1033 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1171_1_fu_487_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_771_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal r_V_2_reg_1044 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_777_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln1245_reg_1049 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_r_V_reg_1054 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln2_reg_1060 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln712_fu_508_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln712_reg_1066 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln712_fu_512_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln712_reg_1071 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln712_2_fu_516_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln712_2_reg_1076 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_real_V_1_fu_520_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_real_V_1_reg_1081 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln712_3_fu_524_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln712_3_reg_1086 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_imag_V_1_fu_528_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_r_M_imag_V_1_reg_1091 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_reg_1096 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1201_6_reg_1101 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1201_9_reg_1106 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_6_reg_1111 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1201_10_reg_1116 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1201_11_reg_1121 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_7_reg_1126 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1201_12_reg_1131 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1201_13_reg_1136 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_8_reg_1141 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1201_14_reg_1146 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1201_15_reg_1151 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln1201_fu_712_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln1201_reg_1156 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln1201_3_fu_727_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln1201_3_reg_1161 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln1201_4_fu_742_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln1201_4_reg_1166 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln1201_5_fu_757_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln1201_5_reg_1171 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln88_fu_249_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_80 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_allocacmp_i_2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal sext_ln1245_3_fu_264_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1245_2_fu_267_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1245_1_fu_310_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1245_fu_313_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1201_2_fu_346_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_5_fu_361_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_3_fu_366_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln1201_4_fu_374_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1201_8_fu_379_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1201_fu_415_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1201_3_fu_430_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1201_5_fu_444_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1201_1_fu_465_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1201_6_fu_476_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_790_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_783_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal t_V_7_fu_532_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal t_V_6_fu_537_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal t_V_5_fu_542_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal t_V_4_fu_547_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1201_fu_564_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1201_7_fu_576_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1201_2_fu_560_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1201_9_fu_610_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1201_4_fu_556_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1201_11_fu_644_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1201_6_fu_552_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1201_13_fu_678_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1201_8_fu_707_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1201_1_fu_704_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1201_10_fu_722_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1201_3_fu_719_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1201_12_fu_737_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1201_5_fu_734_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1201_14_fu_752_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1201_7_fu_749_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_771_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_771_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_777_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_783_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_783_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_790_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_790_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_771_ce : STD_LOGIC;
    signal grp_fu_777_ce : STD_LOGIC;
    signal grp_fu_783_ce : STD_LOGIC;
    signal grp_fu_790_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_771_p10 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component hls_xfft2real_mul_mul_16s_15ns_31_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component hls_xfft2real_mul_mul_16s_16s_31_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component hls_xfft2real_mac_muladd_16s_15ns_31s_31_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (30 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component hls_xfft2real_mac_mulsub_16s_16s_31s_31_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (30 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component hls_xfft2real_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_mul_16s_15ns_31_4_1_U9 : component hls_xfft2real_mul_mul_16s_15ns_31_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_771_p0,
        din1 => grp_fu_771_p1,
        ce => grp_fu_771_ce,
        dout => grp_fu_771_p2);

    mul_mul_16s_16s_31_4_1_U10 : component hls_xfft2real_mul_mul_16s_16s_31_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => w_M_imag_V_reg_988,
        din1 => grp_fu_777_p1,
        ce => grp_fu_777_ce,
        dout => grp_fu_777_p2);

    mac_muladd_16s_15ns_31s_31_4_1_U11 : component hls_xfft2real_mac_muladd_16s_15ns_31s_31_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        din2_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_783_p0,
        din1 => grp_fu_783_p1,
        din2 => mul_ln1245_reg_1049,
        ce => grp_fu_783_ce,
        dout => grp_fu_783_p3);

    mac_mulsub_16s_16s_31s_31_4_1_U12 : component hls_xfft2real_mac_mulsub_16s_16s_31s_31_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_790_p0,
        din1 => grp_fu_790_p1,
        din2 => r_V_2_reg_1044,
        ce => grp_fu_790_ce,
        dout => grp_fu_790_p3);

    flow_control_loop_pipe_sequential_init_U : component hls_xfft2real_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter15_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_80 <= ap_const_lv9_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    i_fu_80 <= add_ln88_reg_824;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln92_reg_883_pp0_iter12_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln712_reg_1066 <= add_ln712_fu_508_p2;
                sub_ln712_reg_1071 <= sub_ln712_fu_512_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln88_reg_824 <= add_ln88_fu_221_p2;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                i_2_reg_814 <= ap_sig_allocacmp_i_2;
                i_2_reg_814_pp0_iter1_reg <= i_2_reg_814;
                trunc_ln88_reg_829_pp0_iter1_reg <= trunc_ln88_reg_829;
                    zext_ln712_reg_839(7 downto 0) <= zext_ln712_fu_237_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                descramble_buf_M_imag_V_1_load_1_reg_866 <= descramble_buf_M_imag_V_1_q0;
                descramble_buf_M_imag_V_load_reg_876 <= descramble_buf_M_imag_V_q0;
                descramble_buf_M_imag_V_load_reg_876_pp0_iter10_reg <= descramble_buf_M_imag_V_load_reg_876_pp0_iter9_reg;
                descramble_buf_M_imag_V_load_reg_876_pp0_iter11_reg <= descramble_buf_M_imag_V_load_reg_876_pp0_iter10_reg;
                descramble_buf_M_imag_V_load_reg_876_pp0_iter12_reg <= descramble_buf_M_imag_V_load_reg_876_pp0_iter11_reg;
                descramble_buf_M_imag_V_load_reg_876_pp0_iter5_reg <= descramble_buf_M_imag_V_load_reg_876;
                descramble_buf_M_imag_V_load_reg_876_pp0_iter6_reg <= descramble_buf_M_imag_V_load_reg_876_pp0_iter5_reg;
                descramble_buf_M_imag_V_load_reg_876_pp0_iter7_reg <= descramble_buf_M_imag_V_load_reg_876_pp0_iter6_reg;
                descramble_buf_M_imag_V_load_reg_876_pp0_iter8_reg <= descramble_buf_M_imag_V_load_reg_876_pp0_iter7_reg;
                descramble_buf_M_imag_V_load_reg_876_pp0_iter9_reg <= descramble_buf_M_imag_V_load_reg_876_pp0_iter8_reg;
                descramble_buf_M_real_V_1_load_1_reg_913 <= descramble_buf_M_real_V_1_q0;
                descramble_buf_M_real_V_load_reg_906 <= descramble_buf_M_real_V_q0;
                descramble_buf_M_real_V_load_reg_906_pp0_iter10_reg <= descramble_buf_M_real_V_load_reg_906_pp0_iter9_reg;
                descramble_buf_M_real_V_load_reg_906_pp0_iter11_reg <= descramble_buf_M_real_V_load_reg_906_pp0_iter10_reg;
                descramble_buf_M_real_V_load_reg_906_pp0_iter12_reg <= descramble_buf_M_real_V_load_reg_906_pp0_iter11_reg;
                descramble_buf_M_real_V_load_reg_906_pp0_iter6_reg <= descramble_buf_M_real_V_load_reg_906;
                descramble_buf_M_real_V_load_reg_906_pp0_iter7_reg <= descramble_buf_M_real_V_load_reg_906_pp0_iter6_reg;
                descramble_buf_M_real_V_load_reg_906_pp0_iter8_reg <= descramble_buf_M_real_V_load_reg_906_pp0_iter7_reg;
                descramble_buf_M_real_V_load_reg_906_pp0_iter9_reg <= descramble_buf_M_real_V_load_reg_906_pp0_iter8_reg;
                f_M_imag_V_reg_998 <= f_M_imag_V_fu_435_p3;
                f_M_imag_V_reg_998_pp0_iter10_reg <= f_M_imag_V_reg_998_pp0_iter9_reg;
                f_M_imag_V_reg_998_pp0_iter11_reg <= f_M_imag_V_reg_998_pp0_iter10_reg;
                f_M_imag_V_reg_998_pp0_iter12_reg <= f_M_imag_V_reg_998_pp0_iter11_reg;
                f_M_imag_V_reg_998_pp0_iter8_reg <= f_M_imag_V_reg_998;
                f_M_imag_V_reg_998_pp0_iter9_reg <= f_M_imag_V_reg_998_pp0_iter8_reg;
                f_M_real_V_reg_1027 <= f_M_real_V_fu_470_p3;
                f_M_real_V_reg_1027_pp0_iter10_reg <= f_M_real_V_reg_1027_pp0_iter9_reg;
                f_M_real_V_reg_1027_pp0_iter11_reg <= f_M_real_V_reg_1027_pp0_iter10_reg;
                f_M_real_V_reg_1027_pp0_iter12_reg <= f_M_real_V_reg_1027_pp0_iter11_reg;
                f_M_real_V_reg_1027_pp0_iter9_reg <= f_M_real_V_reg_1027;
                g_M_imag_V_reg_1033 <= g_M_imag_V_fu_481_p3;
                g_M_real_V_reg_968 <= g_M_real_V_fu_389_p3;
                i_2_reg_814_pp0_iter2_reg <= i_2_reg_814_pp0_iter1_reg;
                i_2_reg_814_pp0_iter3_reg <= i_2_reg_814_pp0_iter2_reg;
                icmp_ln92_reg_883 <= icmp_ln92_fu_254_p2;
                icmp_ln92_reg_883_pp0_iter10_reg <= icmp_ln92_reg_883_pp0_iter9_reg;
                icmp_ln92_reg_883_pp0_iter11_reg <= icmp_ln92_reg_883_pp0_iter10_reg;
                icmp_ln92_reg_883_pp0_iter12_reg <= icmp_ln92_reg_883_pp0_iter11_reg;
                icmp_ln92_reg_883_pp0_iter13_reg <= icmp_ln92_reg_883_pp0_iter12_reg;
                icmp_ln92_reg_883_pp0_iter5_reg <= icmp_ln92_reg_883;
                icmp_ln92_reg_883_pp0_iter6_reg <= icmp_ln92_reg_883_pp0_iter5_reg;
                icmp_ln92_reg_883_pp0_iter7_reg <= icmp_ln92_reg_883_pp0_iter6_reg;
                icmp_ln92_reg_883_pp0_iter8_reg <= icmp_ln92_reg_883_pp0_iter7_reg;
                icmp_ln92_reg_883_pp0_iter9_reg <= icmp_ln92_reg_883_pp0_iter8_reg;
                mul_ln1245_reg_1049 <= grp_fu_777_p2;
                p_r_V_reg_1054 <= grp_fu_790_p3(30 downto 15);
                r_V_2_reg_1044 <= grp_fu_771_p2;
                ret_V_6_reg_948 <= ret_V_6_fu_322_p2;
                ret_V_7_reg_923 <= ret_V_7_fu_276_p2;
                ret_V_8_reg_918 <= ret_V_8_fu_270_p2;
                ret_V_9_reg_943 <= ret_V_9_fu_316_p2;
                select_ln1201_3_reg_1161 <= select_ln1201_3_fu_727_p3;
                select_ln1201_4_reg_1166 <= select_ln1201_4_fu_742_p3;
                select_ln1201_5_reg_1171 <= select_ln1201_5_fu_757_p3;
                select_ln1201_reg_1156 <= select_ln1201_fu_712_p3;
                sext_ln1171_2_reg_1021 <= sext_ln1171_2_fu_462_p1;
                sext_ln1171_2_reg_1021_pp0_iter8_reg <= sext_ln1171_2_reg_1021;
                sub_ln712_1_reg_891 <= sub_ln712_1_fu_259_p2;
                tmp_2_reg_928 <= ret_V_7_fu_276_p2(16 downto 16);
                tmp_2_reg_928_pp0_iter6_reg <= tmp_2_reg_928;
                tmp_4_reg_973 <= ret_V_9_fu_316_p2(16 downto 16);
                tmp_4_reg_973_pp0_iter7_reg <= tmp_4_reg_973;
                tmp_5_reg_1096 <= t_V_4_fu_547_p3(15 downto 15);
                tmp_6_reg_1111 <= t_V_5_fu_542_p3(15 downto 15);
                tmp_7_reg_1126 <= t_V_6_fu_537_p3(15 downto 15);
                tmp_8_reg_1141 <= t_V_7_fu_532_p3(15 downto 15);
                tmp_reg_953 <= ret_V_6_fu_322_p2(16 downto 16);
                tmp_reg_953_pp0_iter7_reg <= tmp_reg_953;
                trunc_ln1201_10_reg_1116 <= sub_ln1201_9_fu_610_p2(16 downto 1);
                trunc_ln1201_11_reg_1121 <= t_V_5_fu_542_p3(15 downto 1);
                trunc_ln1201_12_reg_1131 <= sub_ln1201_11_fu_644_p2(16 downto 1);
                trunc_ln1201_13_reg_1136 <= t_V_6_fu_537_p3(15 downto 1);
                trunc_ln1201_14_reg_1146 <= sub_ln1201_13_fu_678_p2(16 downto 1);
                trunc_ln1201_15_reg_1151 <= t_V_7_fu_532_p3(15 downto 1);
                trunc_ln1201_2_reg_958 <= ret_V_6_fu_322_p2(16 downto 1);
                trunc_ln1201_2_reg_958_pp0_iter7_reg <= trunc_ln1201_2_reg_958;
                trunc_ln1201_3_reg_978 <= ret_V_9_fu_316_p2(16 downto 1);
                trunc_ln1201_3_reg_978_pp0_iter7_reg <= trunc_ln1201_3_reg_978;
                trunc_ln1201_5_reg_933 <= ret_V_7_fu_276_p2(16 downto 1);
                trunc_ln1201_5_reg_933_pp0_iter6_reg <= trunc_ln1201_5_reg_933;
                trunc_ln1201_6_reg_1101 <= sub_ln1201_7_fu_576_p2(16 downto 1);
                trunc_ln1201_7_reg_938 <= ret_V_8_fu_270_p2(16 downto 1);
                trunc_ln1201_9_reg_1106 <= t_V_4_fu_547_p3(15 downto 1);
                trunc_ln2_reg_1060 <= grp_fu_783_p3(30 downto 15);
                w_M_imag_V_reg_988 <= twid_rom_M_imag_V_q0;
                w_M_real_V_reg_983 <= twid_rom_M_real_V_q0;
                    zext_ln1168_reg_1015(14 downto 0) <= zext_ln1168_fu_459_p1(14 downto 0);
                    zext_ln1168_reg_1015_pp0_iter8_reg(14 downto 0) <= zext_ln1168_reg_1015(14 downto 0);
                    zext_ln712_reg_839_pp0_iter10_reg(7 downto 0) <= zext_ln712_reg_839_pp0_iter9_reg(7 downto 0);
                    zext_ln712_reg_839_pp0_iter11_reg(7 downto 0) <= zext_ln712_reg_839_pp0_iter10_reg(7 downto 0);
                    zext_ln712_reg_839_pp0_iter12_reg(7 downto 0) <= zext_ln712_reg_839_pp0_iter11_reg(7 downto 0);
                    zext_ln712_reg_839_pp0_iter13_reg(7 downto 0) <= zext_ln712_reg_839_pp0_iter12_reg(7 downto 0);
                    zext_ln712_reg_839_pp0_iter14_reg(7 downto 0) <= zext_ln712_reg_839_pp0_iter13_reg(7 downto 0);
                    zext_ln712_reg_839_pp0_iter15_reg(7 downto 0) <= zext_ln712_reg_839_pp0_iter14_reg(7 downto 0);
                    zext_ln712_reg_839_pp0_iter2_reg(7 downto 0) <= zext_ln712_reg_839(7 downto 0);
                    zext_ln712_reg_839_pp0_iter3_reg(7 downto 0) <= zext_ln712_reg_839_pp0_iter2_reg(7 downto 0);
                    zext_ln712_reg_839_pp0_iter4_reg(7 downto 0) <= zext_ln712_reg_839_pp0_iter3_reg(7 downto 0);
                    zext_ln712_reg_839_pp0_iter5_reg(7 downto 0) <= zext_ln712_reg_839_pp0_iter4_reg(7 downto 0);
                    zext_ln712_reg_839_pp0_iter6_reg(7 downto 0) <= zext_ln712_reg_839_pp0_iter5_reg(7 downto 0);
                    zext_ln712_reg_839_pp0_iter7_reg(7 downto 0) <= zext_ln712_reg_839_pp0_iter6_reg(7 downto 0);
                    zext_ln712_reg_839_pp0_iter8_reg(7 downto 0) <= zext_ln712_reg_839_pp0_iter7_reg(7 downto 0);
                    zext_ln712_reg_839_pp0_iter9_reg(7 downto 0) <= zext_ln712_reg_839_pp0_iter8_reg(7 downto 0);
                    zext_ln90_reg_851(7 downto 0) <= zext_ln90_fu_245_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln92_reg_883_pp0_iter12_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_r_M_imag_V_1_reg_1091 <= p_r_M_imag_V_1_fu_528_p2;
                p_r_M_real_V_1_reg_1081 <= p_r_M_real_V_1_fu_520_p2;
                sub_ln712_2_reg_1076 <= sub_ln712_2_fu_516_p2;
                sub_ln712_3_reg_1086 <= sub_ln712_3_fu_524_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln88_fu_215_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                sub_ln712_4_reg_834 <= sub_ln712_4_fu_231_p2;
                trunc_ln88_reg_829 <= trunc_ln88_fu_227_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_953 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                trunc_ln1201_1_reg_993 <= sub_ln1201_fu_415_p2(16 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_2_reg_928 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                trunc_ln1201_4_reg_963 <= sub_ln1201_2_fu_346_p2(16 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_4_reg_973 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                trunc_ln1201_s_reg_1010 <= sub_ln1201_5_fu_444_p2(16 downto 1);
            end if;
        end if;
    end process;
    zext_ln712_reg_839(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln712_reg_839_pp0_iter2_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln712_reg_839_pp0_iter3_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln712_reg_839_pp0_iter4_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln712_reg_839_pp0_iter5_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln712_reg_839_pp0_iter6_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln712_reg_839_pp0_iter7_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln712_reg_839_pp0_iter8_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln712_reg_839_pp0_iter9_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln712_reg_839_pp0_iter10_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln712_reg_839_pp0_iter11_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln712_reg_839_pp0_iter12_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln712_reg_839_pp0_iter13_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln712_reg_839_pp0_iter14_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln712_reg_839_pp0_iter15_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln90_reg_851(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln1168_reg_1015(30 downto 15) <= "0000000000000000";
    zext_ln1168_reg_1015_pp0_iter8_reg(30 downto 15) <= "0000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln712_fu_508_p2 <= std_logic_vector(signed(descramble_buf_M_imag_V_load_reg_876_pp0_iter12_reg) + signed(descramble_buf_M_real_V_load_reg_906_pp0_iter12_reg));
    add_ln88_fu_221_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_2) + unsigned(ap_const_lv9_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter16, real_spectrum_lo_i_full_n)
    begin
                ap_block_pp0_stage0_01001 <= ((real_spectrum_lo_i_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter16, real_spectrum_lo_i_full_n)
    begin
                ap_block_pp0_stage0_11001 <= ((real_spectrum_lo_i_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter16, real_spectrum_lo_i_full_n)
    begin
                ap_block_pp0_stage0_subdone <= ((real_spectrum_lo_i_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state17_pp0_stage0_iter16_assign_proc : process(real_spectrum_lo_i_full_n)
    begin
                ap_block_state17_pp0_stage0_iter16 <= (real_spectrum_lo_i_full_n = ap_const_logic_0);
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln88_fu_215_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln88_fu_215_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter15_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter15_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, add_ln88_reg_824, i_fu_80, ap_loop_init)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then
            if ((ap_loop_init = ap_const_logic_1)) then 
                ap_sig_allocacmp_i_2 <= ap_const_lv9_0;
            elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                ap_sig_allocacmp_i_2 <= add_ln88_reg_824;
            else 
                ap_sig_allocacmp_i_2 <= i_fu_80;
            end if;
        else 
            ap_sig_allocacmp_i_2 <= i_fu_80;
        end if; 
    end process;

    descramble_buf_M_imag_V_1_address0 <= zext_ln712_fu_237_p1(8 - 1 downto 0);

    descramble_buf_M_imag_V_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            descramble_buf_M_imag_V_1_ce0 <= ap_const_logic_1;
        else 
            descramble_buf_M_imag_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    descramble_buf_M_imag_V_address0 <= zext_ln90_fu_245_p1(8 - 1 downto 0);

    descramble_buf_M_imag_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            descramble_buf_M_imag_V_ce0 <= ap_const_logic_1;
        else 
            descramble_buf_M_imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    descramble_buf_M_real_V_1_address0 <= zext_ln712_reg_839_pp0_iter2_reg(8 - 1 downto 0);

    descramble_buf_M_real_V_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            descramble_buf_M_real_V_1_ce0 <= ap_const_logic_1;
        else 
            descramble_buf_M_real_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    descramble_buf_M_real_V_address0 <= zext_ln90_reg_851(8 - 1 downto 0);

    descramble_buf_M_real_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            descramble_buf_M_real_V_ce0 <= ap_const_logic_1;
        else 
            descramble_buf_M_real_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_M_imag_V_fu_435_p3 <= 
        sub_ln1201_3_fu_430_p2 when (tmp_2_reg_928_pp0_iter6_reg(0) = '1') else 
        trunc_ln1201_5_reg_933_pp0_iter6_reg;
    f_M_real_V_fu_470_p3 <= 
        sub_ln1201_1_fu_465_p2 when (tmp_reg_953_pp0_iter7_reg(0) = '1') else 
        trunc_ln1201_2_reg_958_pp0_iter7_reg;
    g_M_imag_V_fu_481_p3 <= 
        sub_ln1201_6_fu_476_p2 when (tmp_4_reg_973_pp0_iter7_reg(0) = '1') else 
        trunc_ln1201_3_reg_978_pp0_iter7_reg;
    g_M_real_V_fu_389_p3 <= 
        sub_ln1201_4_fu_374_p2 when (tmp_3_fu_366_p3(0) = '1') else 
        trunc_ln1201_8_fu_379_p4;

    grp_fu_771_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_771_ce <= ap_const_logic_1;
        else 
            grp_fu_771_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_771_p0 <= sext_ln1171_fu_441_p1(16 - 1 downto 0);
    grp_fu_771_p1 <= grp_fu_771_p10(15 - 1 downto 0);
    grp_fu_771_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_M_real_V_reg_983),31));

    grp_fu_777_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_777_ce <= ap_const_logic_1;
        else 
            grp_fu_777_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_777_p1 <= sext_ln1171_fu_441_p1(16 - 1 downto 0);

    grp_fu_783_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_783_ce <= ap_const_logic_1;
        else 
            grp_fu_783_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_783_p0 <= sext_ln1171_1_fu_487_p1(16 - 1 downto 0);
    grp_fu_783_p1 <= zext_ln1168_reg_1015_pp0_iter8_reg(15 - 1 downto 0);

    grp_fu_790_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_790_ce <= ap_const_logic_1;
        else 
            grp_fu_790_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_790_p0 <= sext_ln1171_2_reg_1021_pp0_iter8_reg(16 - 1 downto 0);
    grp_fu_790_p1 <= sext_ln1171_1_fu_487_p1(16 - 1 downto 0);
    icmp_ln88_fu_215_p2 <= "1" when (ap_sig_allocacmp_i_2 = ap_const_lv9_100) else "0";
    icmp_ln92_fu_254_p2 <= "1" when (i_2_reg_814_pp0_iter3_reg = ap_const_lv9_0) else "0";
    p_r_M_imag_V_1_fu_528_p2 <= std_logic_vector(unsigned(trunc_ln2_reg_1060) + unsigned(f_M_imag_V_reg_998_pp0_iter12_reg));
    p_r_M_real_V_1_fu_520_p2 <= std_logic_vector(unsigned(p_r_V_reg_1054) + unsigned(f_M_real_V_reg_1027_pp0_iter12_reg));
    r_V_5_fu_361_p2 <= std_logic_vector(unsigned(ap_const_lv17_0) - unsigned(ret_V_8_reg_918));
    real_spectrum_hi_buf_M_imag_V_address0 <= zext_ln712_reg_839_pp0_iter15_reg(8 - 1 downto 0);

    real_spectrum_hi_buf_M_imag_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            real_spectrum_hi_buf_M_imag_V_ce0 <= ap_const_logic_1;
        else 
            real_spectrum_hi_buf_M_imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    real_spectrum_hi_buf_M_imag_V_d0 <= select_ln1201_5_reg_1171;

    real_spectrum_hi_buf_M_imag_V_we0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            real_spectrum_hi_buf_M_imag_V_we0 <= ap_const_logic_1;
        else 
            real_spectrum_hi_buf_M_imag_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    real_spectrum_hi_buf_M_real_V_address0 <= zext_ln712_reg_839_pp0_iter15_reg(8 - 1 downto 0);

    real_spectrum_hi_buf_M_real_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            real_spectrum_hi_buf_M_real_V_ce0 <= ap_const_logic_1;
        else 
            real_spectrum_hi_buf_M_real_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    real_spectrum_hi_buf_M_real_V_d0 <= select_ln1201_4_reg_1166;

    real_spectrum_hi_buf_M_real_V_we0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            real_spectrum_hi_buf_M_real_V_we0 <= ap_const_logic_1;
        else 
            real_spectrum_hi_buf_M_real_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    real_spectrum_lo_i_blk_n_assign_proc : process(ap_enable_reg_pp0_iter16, real_spectrum_lo_i_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            real_spectrum_lo_i_blk_n <= real_spectrum_lo_i_full_n;
        else 
            real_spectrum_lo_i_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    real_spectrum_lo_i_din <= (select_ln1201_3_reg_1161 & select_ln1201_reg_1156);

    real_spectrum_lo_i_write_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            real_spectrum_lo_i_write <= ap_const_logic_1;
        else 
            real_spectrum_lo_i_write <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_6_fu_322_p2 <= std_logic_vector(signed(sext_ln1245_1_fu_310_p1) + signed(sext_ln1245_fu_313_p1));
    ret_V_7_fu_276_p2 <= std_logic_vector(signed(sext_ln1245_3_fu_264_p1) + signed(sext_ln1245_2_fu_267_p1));
    ret_V_8_fu_270_p2 <= std_logic_vector(signed(sext_ln1245_3_fu_264_p1) - signed(sext_ln1245_2_fu_267_p1));
    ret_V_9_fu_316_p2 <= std_logic_vector(signed(sext_ln1245_1_fu_310_p1) - signed(sext_ln1245_fu_313_p1));
    select_ln1201_3_fu_727_p3 <= 
        sub_ln1201_10_fu_722_p2 when (tmp_6_reg_1111(0) = '1') else 
        sext_ln1201_3_fu_719_p1;
    select_ln1201_4_fu_742_p3 <= 
        sub_ln1201_12_fu_737_p2 when (tmp_7_reg_1126(0) = '1') else 
        sext_ln1201_5_fu_734_p1;
    select_ln1201_5_fu_757_p3 <= 
        sub_ln1201_14_fu_752_p2 when (tmp_8_reg_1141(0) = '1') else 
        sext_ln1201_7_fu_749_p1;
    select_ln1201_fu_712_p3 <= 
        sub_ln1201_8_fu_707_p2 when (tmp_5_reg_1096(0) = '1') else 
        sext_ln1201_1_fu_704_p1;
        sext_ln1171_1_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(g_M_imag_V_reg_1033),31));

        sext_ln1171_2_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(w_M_imag_V_reg_988),31));

        sext_ln1171_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(g_M_real_V_reg_968),31));

        sext_ln1201_1_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1201_9_reg_1106),16));

        sext_ln1201_2_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(t_V_5_fu_542_p3),17));

        sext_ln1201_3_fu_719_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1201_11_reg_1121),16));

        sext_ln1201_4_fu_556_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(t_V_6_fu_537_p3),17));

        sext_ln1201_5_fu_734_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1201_13_reg_1136),16));

        sext_ln1201_6_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(t_V_7_fu_532_p3),17));

        sext_ln1201_7_fu_749_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1201_15_reg_1151),16));

        sext_ln1201_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(t_V_4_fu_547_p3),17));

        sext_ln1245_1_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(descramble_buf_M_real_V_1_load_1_reg_913),17));

        sext_ln1245_2_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(descramble_buf_M_imag_V_load_reg_876),17));

        sext_ln1245_3_fu_264_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln712_1_reg_891),17));

        sext_ln1245_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(descramble_buf_M_real_V_load_reg_906),17));

    sub_ln1201_10_fu_722_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(trunc_ln1201_10_reg_1116));
    sub_ln1201_11_fu_644_p2 <= std_logic_vector(unsigned(ap_const_lv17_0) - unsigned(sext_ln1201_4_fu_556_p1));
    sub_ln1201_12_fu_737_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(trunc_ln1201_12_reg_1131));
    sub_ln1201_13_fu_678_p2 <= std_logic_vector(unsigned(ap_const_lv17_0) - unsigned(sext_ln1201_6_fu_552_p1));
    sub_ln1201_14_fu_752_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(trunc_ln1201_14_reg_1146));
    sub_ln1201_1_fu_465_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(trunc_ln1201_1_reg_993));
    sub_ln1201_2_fu_346_p2 <= std_logic_vector(unsigned(ap_const_lv17_0) - unsigned(ret_V_7_reg_923));
    sub_ln1201_3_fu_430_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(trunc_ln1201_4_reg_963));
    sub_ln1201_4_fu_374_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(trunc_ln1201_7_reg_938));
    sub_ln1201_5_fu_444_p2 <= std_logic_vector(unsigned(ap_const_lv17_0) - unsigned(ret_V_9_reg_943));
    sub_ln1201_6_fu_476_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(trunc_ln1201_s_reg_1010));
    sub_ln1201_7_fu_576_p2 <= std_logic_vector(unsigned(ap_const_lv17_0) - unsigned(sext_ln1201_fu_564_p1));
    sub_ln1201_8_fu_707_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(trunc_ln1201_6_reg_1101));
    sub_ln1201_9_fu_610_p2 <= std_logic_vector(unsigned(ap_const_lv17_0) - unsigned(sext_ln1201_2_fu_560_p1));
    sub_ln1201_fu_415_p2 <= std_logic_vector(unsigned(ap_const_lv17_0) - unsigned(ret_V_6_reg_948));
    sub_ln712_1_fu_259_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(descramble_buf_M_imag_V_1_load_1_reg_866));
    sub_ln712_2_fu_516_p2 <= std_logic_vector(unsigned(f_M_real_V_reg_1027_pp0_iter12_reg) - unsigned(p_r_V_reg_1054));
    sub_ln712_3_fu_524_p2 <= std_logic_vector(unsigned(trunc_ln2_reg_1060) - unsigned(f_M_imag_V_reg_998_pp0_iter12_reg));
    sub_ln712_4_fu_231_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(trunc_ln88_fu_227_p1));
    sub_ln712_fu_512_p2 <= std_logic_vector(signed(descramble_buf_M_real_V_load_reg_906_pp0_iter12_reg) - signed(descramble_buf_M_imag_V_load_reg_876_pp0_iter12_reg));
    t_V_4_fu_547_p3 <= 
        add_ln712_reg_1066 when (icmp_ln92_reg_883_pp0_iter13_reg(0) = '1') else 
        p_r_M_real_V_1_reg_1081;
    t_V_5_fu_542_p3 <= 
        sub_ln712_reg_1071 when (icmp_ln92_reg_883_pp0_iter13_reg(0) = '1') else 
        p_r_M_imag_V_1_reg_1091;
    t_V_6_fu_537_p3 <= 
        descramble_buf_M_real_V_1_load when (icmp_ln92_reg_883_pp0_iter13_reg(0) = '1') else 
        sub_ln712_2_reg_1076;
    t_V_7_fu_532_p3 <= 
        descramble_buf_M_imag_V_1_load when (icmp_ln92_reg_883_pp0_iter13_reg(0) = '1') else 
        sub_ln712_3_reg_1086;
    tmp_3_fu_366_p3 <= r_V_5_fu_361_p2(16 downto 16);
    trunc_ln1201_8_fu_379_p4 <= r_V_5_fu_361_p2(16 downto 1);
    trunc_ln88_fu_227_p1 <= ap_sig_allocacmp_i_2(8 - 1 downto 0);
    twid_rom_M_imag_V_address0 <= zext_ln88_fu_249_p1(8 - 1 downto 0);

    twid_rom_M_imag_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            twid_rom_M_imag_V_ce0 <= ap_const_logic_1;
        else 
            twid_rom_M_imag_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    twid_rom_M_real_V_address0 <= zext_ln88_fu_249_p1(8 - 1 downto 0);

    twid_rom_M_real_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            twid_rom_M_real_V_ce0 <= ap_const_logic_1;
        else 
            twid_rom_M_real_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln1168_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_M_real_V_reg_983),31));
    zext_ln712_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln712_4_reg_834),64));
    zext_ln88_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_814_pp0_iter3_reg),64));
    zext_ln90_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln88_reg_829_pp0_iter1_reg),64));
end behav;
