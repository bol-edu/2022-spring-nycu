-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hls_real2xfft_window_fn_ap_fixed_16_1_5_3_0_ap_fixed_16_1_5_3_0_ap_fixed_16_1_5_0_0_1024_2_2_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    indata_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    indata_0_ce0 : OUT STD_LOGIC;
    indata_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    indata_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    indata_1_ce0 : OUT STD_LOGIC;
    indata_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    outdata_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    outdata_0_ce0 : OUT STD_LOGIC;
    outdata_0_we0 : OUT STD_LOGIC;
    outdata_0_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    outdata_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    outdata_1_ce0 : OUT STD_LOGIC;
    outdata_1_we0 : OUT STD_LOGIC;
    outdata_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of hls_real2xfft_window_fn_ap_fixed_16_1_5_3_0_ap_fixed_16_1_5_3_0_ap_fixed_16_1_5_0_0_1024_2_2_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal tmp_reg_259 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal coeff_tab_0_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal coeff_tab_0_ce0 : STD_LOGIC;
    signal coeff_tab_0_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal coeff_tab_1_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal coeff_tab_1_ce0 : STD_LOGIC;
    signal coeff_tab_1_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal i33_reg_128 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1169_fu_156_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1169_reg_228 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1169_reg_228_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1169_reg_228_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1169_reg_228_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1169_reg_228_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1169_reg_228_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1169_reg_228_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln55_fu_170_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln55_reg_254 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal tmp_fu_174_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_259_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_259_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_259_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_259_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_259_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_259_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_reg_263 : STD_LOGIC_VECTOR (14 downto 0);
    signal indata_0_load_reg_268 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_2_reg_273 : STD_LOGIC_VECTOR (14 downto 0);
    signal indata_1_load_reg_278 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln_reg_303 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln717_1_reg_308 : STD_LOGIC_VECTOR (15 downto 0);
    signal rewind_ap_ready : STD_LOGIC;
    signal rewind_ap_ready_reg : STD_LOGIC := '0';
    signal rewind_enable : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_phi_mux_i33_phi_fu_132_p6 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal lshr_ln_fu_146_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal i33_cast_fu_142_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_fu_164_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_214_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_221_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_214_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_221_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_214_ce : STD_LOGIC;
    signal grp_fu_221_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_idle_pp0_0to6 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_214_p10 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_221_p10 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_condition_197 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component hls_real2xfft_mul_mul_16s_15ns_31_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component hls_real2xfft_window_fn_ap_fixed_16_1_5_3_0_ap_fixed_16_1_5_3_0_ap_fixed_16_1_5_0_0_1024_2_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component hls_real2xfft_window_fn_ap_fixed_16_1_5_3_0_ap_fixed_16_1_5_3_0_ap_fixed_16_1_5_0_0_1024_2_cud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    coeff_tab_0_U : component hls_real2xfft_window_fn_ap_fixed_16_1_5_3_0_ap_fixed_16_1_5_3_0_ap_fixed_16_1_5_0_0_1024_2_bkb
    generic map (
        DataWidth => 15,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => coeff_tab_0_address0,
        ce0 => coeff_tab_0_ce0,
        q0 => coeff_tab_0_q0);

    coeff_tab_1_U : component hls_real2xfft_window_fn_ap_fixed_16_1_5_3_0_ap_fixed_16_1_5_3_0_ap_fixed_16_1_5_0_0_1024_2_cud
    generic map (
        DataWidth => 15,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => coeff_tab_1_address0,
        ce0 => coeff_tab_1_ce0,
        q0 => coeff_tab_1_q0);

    mul_mul_16s_15ns_31_4_1_U14 : component hls_real2xfft_mul_mul_16s_15ns_31_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => indata_0_load_reg_268,
        din1 => grp_fu_214_p1,
        ce => grp_fu_214_ce,
        dout => grp_fu_214_p2);

    mul_mul_16s_15ns_31_4_1_U15 : component hls_real2xfft_mul_mul_16s_15ns_31_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => indata_1_load_reg_278,
        din1 => grp_fu_221_p1,
        ce => grp_fu_221_ce,
        dout => grp_fu_221_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (tmp_reg_259_pp0_iter6_reg = ap_const_lv1_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= rewind_enable;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    rewind_ap_ready_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                rewind_ap_ready_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    rewind_ap_ready_reg <= rewind_ap_ready;
                else 
                    rewind_ap_ready_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i33_reg_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (tmp_reg_259 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i33_reg_128 <= trunc_ln55_reg_254;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (tmp_reg_259 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                i33_reg_128 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                indata_0_load_reg_268 <= indata_0_q0;
                indata_1_load_reg_278 <= indata_1_q0;
                r_V_2_reg_273 <= coeff_tab_1_q0;
                r_V_reg_263 <= coeff_tab_0_q0;
                tmp_reg_259_pp0_iter2_reg <= tmp_reg_259_pp0_iter1_reg;
                tmp_reg_259_pp0_iter3_reg <= tmp_reg_259_pp0_iter2_reg;
                tmp_reg_259_pp0_iter4_reg <= tmp_reg_259_pp0_iter3_reg;
                tmp_reg_259_pp0_iter5_reg <= tmp_reg_259_pp0_iter4_reg;
                tmp_reg_259_pp0_iter6_reg <= tmp_reg_259_pp0_iter5_reg;
                trunc_ln717_1_reg_308 <= grp_fu_221_p2(30 downto 15);
                trunc_ln_reg_303 <= grp_fu_214_p2(30 downto 15);
                    zext_ln1169_reg_228_pp0_iter2_reg(8 downto 0) <= zext_ln1169_reg_228_pp0_iter1_reg(8 downto 0);
                    zext_ln1169_reg_228_pp0_iter3_reg(8 downto 0) <= zext_ln1169_reg_228_pp0_iter2_reg(8 downto 0);
                    zext_ln1169_reg_228_pp0_iter4_reg(8 downto 0) <= zext_ln1169_reg_228_pp0_iter3_reg(8 downto 0);
                    zext_ln1169_reg_228_pp0_iter5_reg(8 downto 0) <= zext_ln1169_reg_228_pp0_iter4_reg(8 downto 0);
                    zext_ln1169_reg_228_pp0_iter6_reg(8 downto 0) <= zext_ln1169_reg_228_pp0_iter5_reg(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_reg_259 <= i_fu_164_p2(10 downto 10);
                tmp_reg_259_pp0_iter1_reg <= tmp_reg_259;
                    zext_ln1169_reg_228(8 downto 0) <= zext_ln1169_fu_156_p1(8 downto 0);
                    zext_ln1169_reg_228_pp0_iter1_reg(8 downto 0) <= zext_ln1169_reg_228(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                trunc_ln55_reg_254 <= trunc_ln55_fu_170_p1;
            end if;
        end if;
    end process;
    zext_ln1169_reg_228(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    zext_ln1169_reg_228_pp0_iter1_reg(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    zext_ln1169_reg_228_pp0_iter2_reg(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    zext_ln1169_reg_228_pp0_iter3_reg(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    zext_ln1169_reg_228_pp0_iter4_reg(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    zext_ln1169_reg_228_pp0_iter5_reg(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    zext_ln1169_reg_228_pp0_iter6_reg(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_reset_idle_pp0 = ap_const_logic_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_reset_idle_pp0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_done_reg)
    begin
                ap_block_pp0_stage0_11001 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_done_reg)
    begin
                ap_block_pp0_stage0_subdone <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_197_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
                ap_condition_197 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_block_pp0_stage0_11001, tmp_reg_259_pp0_iter6_reg, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (tmp_reg_259_pp0_iter6_reg = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= rewind_enable;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to6_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to6 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i33_phi_fu_132_p6_assign_proc : process(tmp_reg_259, i33_reg_128, trunc_ln55_reg_254, ap_condition_197)
    begin
        if ((ap_const_boolean_1 = ap_condition_197)) then
            if ((tmp_reg_259 = ap_const_lv1_1)) then 
                ap_phi_mux_i33_phi_fu_132_p6 <= ap_const_lv10_0;
            elsif ((tmp_reg_259 = ap_const_lv1_0)) then 
                ap_phi_mux_i33_phi_fu_132_p6 <= trunc_ln55_reg_254;
            else 
                ap_phi_mux_i33_phi_fu_132_p6 <= i33_reg_128;
            end if;
        else 
            ap_phi_mux_i33_phi_fu_132_p6 <= i33_reg_128;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;

    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to6)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to6 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    coeff_tab_0_address0 <= zext_ln1169_fu_156_p1(9 - 1 downto 0);

    coeff_tab_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            coeff_tab_0_ce0 <= ap_const_logic_1;
        else 
            coeff_tab_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    coeff_tab_1_address0 <= zext_ln1169_fu_156_p1(9 - 1 downto 0);

    coeff_tab_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            coeff_tab_1_ce0 <= ap_const_logic_1;
        else 
            coeff_tab_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_214_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_214_ce <= ap_const_logic_1;
        else 
            grp_fu_214_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_214_p1 <= grp_fu_214_p10(15 - 1 downto 0);
    grp_fu_214_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_reg_263),31));

    grp_fu_221_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_221_ce <= ap_const_logic_1;
        else 
            grp_fu_221_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_221_p1 <= grp_fu_221_p10(15 - 1 downto 0);
    grp_fu_221_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_2_reg_273),31));
    i33_cast_fu_142_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i33_phi_fu_132_p6),11));
    i_fu_164_p2 <= std_logic_vector(unsigned(i33_cast_fu_142_p1) + unsigned(ap_const_lv11_2));
    indata_0_address0 <= zext_ln1169_fu_156_p1(9 - 1 downto 0);

    indata_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            indata_0_ce0 <= ap_const_logic_1;
        else 
            indata_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    indata_1_address0 <= zext_ln1169_fu_156_p1(9 - 1 downto 0);

    indata_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            indata_1_ce0 <= ap_const_logic_1;
        else 
            indata_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(tmp_reg_259, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (tmp_reg_259 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln_fu_146_p4 <= ap_phi_mux_i33_phi_fu_132_p6(9 downto 1);
    outdata_0_address0 <= zext_ln1169_reg_228_pp0_iter6_reg(9 - 1 downto 0);

    outdata_0_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            outdata_0_ce0 <= ap_const_logic_1;
        else 
            outdata_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    outdata_0_d0 <= trunc_ln_reg_303;

    outdata_0_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            outdata_0_we0 <= ap_const_logic_1;
        else 
            outdata_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    outdata_1_address0 <= zext_ln1169_reg_228_pp0_iter6_reg(9 - 1 downto 0);

    outdata_1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            outdata_1_ce0 <= ap_const_logic_1;
        else 
            outdata_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    outdata_1_d0 <= trunc_ln717_1_reg_308;

    outdata_1_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            outdata_1_we0 <= ap_const_logic_1;
        else 
            outdata_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    rewind_ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, tmp_fu_174_p3, rewind_ap_ready_reg)
    begin
        if (((rewind_ap_ready_reg = ap_const_logic_1) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_fu_174_p3 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            rewind_ap_ready <= ap_const_logic_1;
        else 
            rewind_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    rewind_enable_assign_proc : process(ap_start, rewind_ap_ready_reg)
    begin
        if (((ap_start = ap_const_logic_1) and (rewind_ap_ready_reg = ap_const_logic_0))) then 
            rewind_enable <= ap_const_logic_1;
        else 
            rewind_enable <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_174_p3 <= i_fu_164_p2(10 downto 10);
    trunc_ln55_fu_170_p1 <= i_fu_164_p2(10 - 1 downto 0);
    zext_ln1169_fu_156_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_146_p4),64));
end behav;
